import os
import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)
import matplotlib.pyplot as plt
import pydicom as pm
import cv2
import torch
import torch.nn as nn
import torch.nn.functional as F
import torch.optim as optim

from tqdm import tqdm

path = "/kaggle/input/siim-isic-melanoma-classification"

# those will be matched with the images and target will be predicted
train_csv = pd.read_csv(path + "/train.csv")
test_csv = pd.read_csv(path + "/test.csv")
submission_file = pd.read_csv(path + "/sample_submission.csv")
#train_csv.head()  # train_csv and (path + /train/) have the same number of records

# check image size
img = pm.dcmread(path + "/train/ISIC_0015719.dcm")

if "PixelData" in img:
    rows = img.Rows
    cols = img.Columns
    print("Image Size.....: {rows:d} x {cols:d}, {size:d} bytes".format(rows = rows, cols = cols, size = len(img.PixelData)))
    if "PixelSpacing" in img:
        print("Pixel Spacing.....: ", img.PixelSpacing)
        
plt.imshow(img.pixel_array, cmap = "gray")
plt.show()

# store images in dataframe --> use only PixelData from dcm file
# create CNN - import torch

EPOCHS = 8
BATCH_SIZE = 100

if torch.cuda.is_available():
    device = torch.device("cuda:0")
    print("running on the GPU")
else:
    device = torch.device("cpu")
    print("running on the CPU")

REBUILD_DATA = False

class melanoma():
    IMG_SIZE = 50
    counter2 = 0
    img_training_data = []
    
    def training_data(self):
        for dirname, _, filename in os.walk(path + "/jpeg/train"):
            for f in filename:
                #for f in tqdm(os.listdir(dirname)):
                try:
                    path_img = os.path.join(path + "/jpeg/train/" + f)
                    img = cv2.imread(path_img, cv2.IMREAD_GRAYSCALE)
                    img = cv2.resize(img, (self.IMG_SIZE, self.IMG_SIZE))
                    f = f[:-4]
                    self.img_training_data.append([np.array(img, dtype = float), np.eye(2)[train_csv.loc[train_csv['image_name'] == f, 'target']]])
                except Exception as e:
                    print(str(e))

        np.random.shuffle(self.img_training_data)
        np.save("img_training_data.npy", self.img_training_data)

if os.path.isfile("img_training_data.npy"):
    REBUILD_DATA = True
    
if REBUILD_DATA == False:
    melanoma_df = melanoma()
    melanoma_df.training_data().to(device)

REBUILD_DATA = False

class melanoma_testset():
    IMG_SIZE = 50
    counter2 = 0
    img_testing_data = []
    
    def testing_data(self):
        for dirname, _, filename in os.walk(path + "/jpeg/test"):
            for f in filename:
                #for f in tqdm(os.listdir(dirname)):
                try:
                    path_img = os.path.join(path + "/jpeg/test/" + f)
                    img = cv2.imread(path_img, cv2.IMREAD_GRAYSCALE)
                    img = cv2.resize(img, (self.IMG_SIZE, self.IMG_SIZE))
                    self.img_testing_data.append([np.array(img, dtype = float)])
                except Exception as e:
                    print(str(e))

        np.save("img_testing_data.npy", self.img_testing_data)

if os.path.isfile("img_testing_data.npy"):
    REBUILD_DATA = True
    
if REBUILD_DATA == False:
    melanoma_test = melanoma_testset()
    melanoma_test.testing_data().to(device)

img_training_data = np.load("/kaggle/working/img_training_data.npy", allow_pickle=True)
img_testing_data = np.load("/kaggle/working/img_testing_data.npy", allow_pickle=True)

plt.imshow(img_training_data[0])
plt.show()


EPOCHS = 8
BATCH_SIZE = 100

if torch.cuda.is_available():
    device = torch.device("cuda:0")
    print("running on the GPU")
else:
    device = torch.device("cpu")
    print("running on the CPU")

#print(img_training_data[1].shape) # (1, 50, 50) aka i image with size of 50 x 50
#plt.imshow(img_training_data[0], cmap="gray")
#plt.show()

class Net(nn.Module):
    
    def __init__(self):
        super().__init__()
        self.conv1 = nn.Conv2d(1, 32, 5) #input, output, kernel size (windows it makes over the image)
        self.conv2 = nn.Conv2d(32, 64, 5)
        self.conv3 = nn.Conv2d(64, 128, 5)
        
        x = torch.randn(50, 50).view(-1, 1, 50, 50)
        self._to_linear = None
        self.convs(x)
        
        self.fc1 = nn.Linear(self._to_linear, 512)
        self.fc2 = nn.Linear(512, 2)
        
    def convs(self, x):
        x = F.max_pool2d(F.relu(self.conv1(x)), (2,2))
        x = F.max_pool2d(F.relu(self.conv2(x)), (2,2))
        x = F.max_pool2d(F.relu(self.conv3(x)), (2,2))
        
        #print(x[0].shape)
        if self._to_linear is None:
            self._to_linear = x[0].shape[0]*x[0].shape[1]*x[0].shape[2]
        return x
    
    def forward(self, x):
        x = self.convs(x)
        x = x.view(-1, self._to_linear)
        x = F.relu(self.fc1(x))
        x = self.fc2(x)
        return F.softmax(x, dim = 1)
    
net = Net().to(device)

optimizer = optim.Adam(net.parameters(), lr=0.001)
loss_func = nn.MSELoss()


X = torch.Tensor([i[0] for i in img_training_data]).view(-1, 50, 50)
X = X/255.0
y = torch.Tensor([i[1] for i in img_training_data])

y1 = torch.Tensor([i[0] for i in img_testing_data]).view(-1, 50, 50)
y1 = y1/255.0

VAL_PCT = 0.1
val_size = int(len(X)*VAL_PCT)
print(val_size)

train_X = X[:-val_size]
train_y = y[:-val_size]

test_X = X[-val_size:]
test_y = y[-val_size:]

def train(net):
    for epoch in range(EPOCHS):
        for i in range(0, len(train_X), BATCH_SIZE):
            batch_X = train_X[i:i+BATCH_SIZE].view(-1, 1, 50, 50).to(device)
            batch_y = train_y[i:i+BATCH_SIZE].to(device)
            
            net.zero_grad()
            outputs = net(batch_X)
            loss = loss_func(outputs, batch_y)
            loss.backward()
            optimizer.step()
        
        print(f"Epoch: {epoch}. Loss: {loss}")
        
def test(net):
    correct = 0
    total = 0
    with torch.no_grad():
        for i in tqdm(range(len(y1))):
            #real_class = torch.argmax(test_y[i]).to(device)
            #net_out = net(test_X[i].view(-1, 1, 50, 50).to(device))[0]
            net_out = net(y1[i].view(-1, 1, 50, 50).to(device))[0]
            predicted_class = torch.argmax(net_out)
            #if predicted_class == real_class:
            #    correct += 1
            #total += 1
            #submission_file.loc[submission_file['image_name'] == i, 'target'] = predicted_class
            submission_file.target[i] = predicted_class.item()
            
    #print("Accuracy: ", round(correct/total, 3))
    
train(net)

test(net) # out of sample test

submission_file.to_csv('submission.csv', index=False)
