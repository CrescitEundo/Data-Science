# Association rules: Apriori Algorithm

library(arules)
library(arulesViz)
data(Groceries)

# explores item information: each item is mapped to two categories, level 1 & level 2 (lvl2 is a subset of lvl 1)
Groceries@itemInfo[1:20,]

# display transactions
apply(Groceries@data[,10:20], 2, function(r) paste(Groceries@itemInfo[r,"labels"],
                                                   collapse = ", "))

# use apriori to search for 1-itemsets that are more frequent than the minimum support (0.02)
itemsets <- apriori(Groceries, parameter = list(minlen=1, maxlen=1, support = 0.02,
                                                target="Frequent itemsets"))
summary(itemsets)
# display top 10 frequent 1-itemsets
inspect(head(sort(itemsets, by ="support"), 10))


### 2-itemsets more frequent than the minimum support (0.02)
itemsets <- apriori(Groceries, parameter = list(minlen = 2, maxlen = 2, support = 0.02,
                                                target = "Frequent itemsets"))

summary(itemsets)
inspect(head(sort(itemsets, by = "support"), 10))


### 3-itemsets more frequent than the minimum support (0.02)
itemsets <- apriori(Groceries, parameter = list(minlen = 3, maxlen = 3, support = 0.02,
                                                target = "frequent itemsets"))
summary(itemsets)
inspect(head(sort(itemsets, by = "support"), 10))


### 4-itemsets more frequent than the minimum support (0.02)
itemsets <- apriori(Groceries, parameter = list(minlen = 4, maxlen = 4, support = 0.02,
                                                target = "frequent itemsets"))
summary(itemsets)


### iterate apriori until the iterations run out of support (when k = 4) _
### OR until k reaches the default maxlen = 10
itemsets <- apriori(Groceries, parameter = list(minlen = 1, support = 0.02,
                                                target = "frequent itemsets"))
summary(itemsets)


## setting a lower support and confidence threshold
rules <- apriori(Groceries, parameter = (list(minlen = 1, support = 0.001,
                                              confidence = 0.6, target = "rules")))
summary(rules)
plot(rules)

# compute the 1/Support(Y) reciprocal
slope <- sort(round(rules@quality$lift / rules@quality$confidence, 2))
unlist(lapply(split(slope, f=slope), length))

pairs(rules@quality)

inspect(head(sort(rules, by="lift"), 10))

confidentRules <- rules[quality(rules)$confidence > 0.9]
confidentRules # set of 127 rules

# plot the LHS vs the RHS of the rules
plot(confidentRules, method = "matrix", measure = c("lift", "confidence"),
     control = list(reorder=TRUE))

# Top 5 rules with the highest lift
# arrows always point from a LHS item to a RHS item 
highLiftRules <- head(sort(rules, by="lift"), 5)
plot(highLiftRules, method="graph", control=list(type="items"))
