//+------------------------------------------------------------------+
//|                                                       EURUSD.mq4 |
//|                                         Christoph Sieberer-Kefer |
//|                                                                ' |
//+------------------------------------------------------------------+
#property copyright "Christoph Sieberer-Kefer"
#property link      "'"
#property version   "1.00"
#property strict



////////// 
/// BOT USED TO ANALYZE THE MARKET PATTERNS AND SEND ORDERS ACCORDINGLY
//////////



// Magic # is identifier for this EA
extern int Magic=123411;
extern int TakeProfit;
//AccountEquity()*0.15; without extern
extern double StopLoss;
extern double LotSize=0.10;

extern bool UseMoveToBreakeven=true;
extern int WhenToMoveToBE=5;
extern int PipsToLockIn=2;

extern bool UseTrailingStop=true;
extern int WhenToTrail=7;
extern int TrailAmount=5;

extern bool UseCandleTrail=true;
extern int PadAmount=10;
extern int CandlesBack=10;

extern bool UsePercentStop=true;
extern double RiskPercent=5;
extern double reward_ratio=2;
extern bool UsePercentProfit=true;
extern double RewardPercent=7;

extern int FastMA=5;
extern int FastMaShift=0;
extern int FastMaMethod=0;
//PRICE_CLOSE(0),OPEN(1),HIGH(2),LOW(3),MEDIAN(4),TYPICAL(5),WEIGHTED(6)
extern int FastMaAppliedTo=0;

extern int SlowMA=21;
extern int SlowMaShift=0;
extern int SlowMaMethod=0;
extern int SlowMaAppliedTo=0;

extern int PercentK=5;
extern int PercentD=3;
extern int SlowingSt=3;
input ENUM_MA_METHOD Stoch_MA_Method=MODE_SMA;

extern int fast_ema_period=21;
extern int slow_ema_period=89;
extern int signal_period=1;
input ENUM_APPLIED_PRICE applied_price=PRICE_CLOSE; 
extern double Macd_Threshold=50;

double pips;
// static initializes a variable only once






int OnInit()
  {
// spread between ask and bid
   double spread=MarketInfo(Symbol(),MODE_SPREAD);
// minimum lot size (eg 0.05)
   double minlot=MarketInfo(Symbol(),MODE_MINLOT);
// max lot size tradable
   double maxlot=MarketInfo(Symbol(),MODE_MAXLOT);
// increment decrement lot size by step (eg +- 0.01)
   double step=MarketInfo(Symbol(),MODE_LOTSTEP);
// margin required to trade 1.0 standard lot
   double margin=MarketInfo(Symbol(),MODE_MARGINREQUIRED);
// leverage on server that we're using
   double leverage=NormalizeDouble((Bid/(margin/100))*1000,0);
// ticksize
   double ticksize=MarketInfo(Symbol(),MODE_TICKSIZE);
   

   if(ticksize==0.00001 || ticksize==0.001)
     {
      pips=ticksize*10;
     }
   else pips=ticksize;
   
   
   int message=MessageBox(Period()+"M Candles, "+"Chart of the "+Symbol()+" currency pair."+
                          "\nThe Spread on the pair is: "+DoubleToStr(spread/10,2)+"pips"+
                          "\nThe smallest lotsize available on this broker is "+minlot+
                          "\nThe biggest lotsize available on this broker is "+maxlot+
                          "\nYou can increase your order's lotsize by "+step+
                          "\nThe margin required to trade a full standard lot is "+margin+
                          "\nThis server uses "+leverage+":1 leverage."+
                          "\nTicksize is "+ticksize+
                          "\nAsk - Spread: "+(Ask-MODE_SPREAD*pips)+
                          "\nDO NOT USE A '0' STOPLOSS!"
                          ,"VITAL INFORMATION",1|0x00000020);

   



//button1(message);
//testswitch(message);  


//MessageBox("End of Start Function");

   return(INIT_SUCCEEDED);
  }
  
  
  
  
  
  
  
void OnDeinit(const int reason)
  {

  }
  
  
  
  
  
  
  
  
  
void OnTick()
  {
   if(OpenOrdersThisPair(Symbol())>0)
     {
      if(UseMoveToBreakeven)MoveToBreakeven();
      if(UseTrailingStop)AdjustTrail();//AdjustTakeProfit();
     }

   //if(IsNewCandle())CheckForMaTrade();
   if(IsNewCandle())CheckForStochasticTrade();

  }
//+------------------------------------------------------------------+


// IF IN THE PROFIT RANGES, SET NEW STOPLOSS EQUAL TO B.E. POINT IF T.P. DOESNT GET HIT
void MoveToBreakeven()
  {
   // for buy orders
   for(int b=OrdersTotal()-1;b>=0;b--)
     {
      if(OrderSelect(b,SELECT_BY_POS,MODE_TRADES))
         if(OrderMagicNumber()==Magic)
            if(OrderSymbol()==Symbol())
               if(OrderType()==OP_BUY)
                  if(Bid-OrderOpenPrice()>WhenToMoveToBE*pips)
                     if(OrderOpenPrice()>OrderStopLoss())
                        OrderModify(OrderTicket(),OrderOpenPrice(),OrderOpenPrice()+(PipsToLockIn*pips),OrderTakeProfit(),0,clrNONE); //OrderOpenPrice()+(PipsToLockIn*pips)
                        
     }
   // for sell orders  
   for(int s=OrdersTotal()-1;s>=0;s--)
     {
      if(OrderSelect(s,SELECT_BY_POS,MODE_TRADES))
         if(OrderMagicNumber()==Magic)
            if(OrderSymbol()==Symbol())
               if(OrderType()==OP_SELL)
                  if(OrderOpenPrice()-Ask>WhenToMoveToBE*pips)
                     if(OrderOpenPrice()<OrderStopLoss())
                        OrderModify(OrderTicket(),OrderOpenPrice(),OrderOpenPrice()-(PipsToLockIn*pips),OrderTakeProfit(),0,clrNONE);
                        
     }
  }

void AdjustTakeProfit()
  {
   for(int b=OrdersTotal()-1;b>=0;b--)
     {
      if(OrderSelect(b,SELECT_BY_POS,MODE_TRADES))
         if(OrderMagicNumber()==Magic)
            if(OrderSymbol()==Symbol())
               if(OrderType()==OP_BUY)
                  if(((OrderOpenPrice()+TakeProfit*pips)-Ask)<(2*pips))
                    { 
                     TakeProfit += 2;
                     OrderModify(OrderTicket(),OrderOpenPrice(),OrderStopLoss(),OrderOpenPrice()+(TakeProfit*pips),0,clrNONE);
                    }
     }
   for(int s=OrdersTotal()-1;s>=0;s--)
     {
      if(OrderSelect(s,SELECT_BY_POS,MODE_TRADES))
         if(OrderMagicNumber()==Magic)
            if(OrderSymbol()==Symbol())
               if(OrderType()==OP_SELL)
                  if(Bid-(OrderOpenPrice()-(TakeProfit*pips))<2*pips)
                    {
                     TakeProfit += 2;
                     OrderModify(OrderTicket(),OrderOpenPrice(),OrderStopLoss(),OrderOpenPrice()-(TakeProfit*pips),0,clrNONE);                     
                    }
     }
  
  }


// IF IN THE PROFIT RANGES, ADJUST THE TRAILING STOPLOSS ACCORDING TO MOVEMENT
void AdjustTrail()
  {
   int buyStopCandle = iLowest(NULL,0,MODE_LOW,CandlesBack,0);
   int sellStopCandle = iHighest(NULL,0,MODE_HIGH,CandlesBack,0);
  
   for(int b=OrdersTotal()-1;b>=0;b--)
     {
      if(OrderSelect(b,SELECT_BY_POS,MODE_TRADES))
         if(OrderMagicNumber()==Magic)
            if(OrderSymbol()==Symbol())
               if(OrderType()==OP_BUY)
               // Trailing s/l based on candle
                  if(UseCandleTrail==true)
                    {
                     if(IsNewCandle())
                        if(OrderStopLoss()<Low[buyStopCandle]-PadAmount*pips)
                           OrderModify(OrderTicket(),OrderOpenPrice(),Low[buyStopCandle]-(PadAmount*pips),OrderTakeProfit(),0,clrNONE);
                    }
               // trailing s/l based on pips     
                  if(UseCandleTrail==false) 
                     if(Bid-OrderOpenPrice()>WhenToTrail*pips)
                           if(OrderStopLoss()<Bid-pips*TrailAmount)
                              OrderModify(OrderTicket(),OrderOpenPrice(),Bid-(pips*TrailAmount),OrderTakeProfit(),0,clrNONE);
     }
     
   for(int s=OrdersTotal()-1;s>=0;s--)
     {
      if(OrderSelect(s,SELECT_BY_POS,MODE_TRADES))
         if(OrderMagicNumber()==Magic)
            if(OrderSymbol()==Symbol())
               if(OrderType()==OP_SELL)
                  if(UseCandleTrail==true)
                    {
                     if(IsNewCandle())
                        if(OrderStopLoss()>High[sellStopCandle]+PadAmount*pips)
                           OrderModify(OrderTicket(),OrderOpenPrice(),High[sellStopCandle]+(PadAmount*pips),OrderTakeProfit(),0,clrNONE);
                    }
                  if(UseCandleTrail==false)
                     if(OrderOpenPrice()-Ask>WhenToTrail*pips)
                           if(OrderStopLoss()>Ask+pips*TrailAmount || OrderStopLoss() == 0)
                              OrderModify(OrderTicket(),OrderOpenPrice(),Ask+(pips*TrailAmount),OrderTakeProfit(),0,clrNONE);
     }  
  }

bool IsNewCandle()
  {
   static int BarsOnChart=0;
   if(Bars==BarsOnChart)
      return(false);
   BarsOnChart=Bars;
   return(true);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
void OrderEntry(int direction)
  {
   
   double bsl;
   double ssl;
   double btp;
   double stp;

   int buyticket;
   int sellticket;
   
   double Equity=AccountEquity();
   double RiskedAmount=Equity*RiskPercent*0.01;
   double RewardAmount=Equity*RewardPercent*0.01;
   // new
   int buyStopCandle=iLowest(NULL,0,MODE_HIGH,CandlesBack,1);
   int sellStopCandle=iHighest(NULL,0,MODE_LOW,CandlesBack,1);
   double buy_stop_price=Low[buyStopCandle]-PadAmount*pips;
   double pips_to_bsl=Ask-buy_stop_price;
   double buy_takeprofit_price=Ask+pips_to_bsl*reward_ratio;
   double sell_stop_price=High[sellStopCandle]+PadAmount*pips;
   double pips_to_ssl=sell_stop_price-Bid;
   double sell_takeprofit_price=Bid-pips_to_ssl*reward_ratio;
   
   if(direction==0)
      //bsl=Ask-(StopLoss*pips);
      //if(StopLoss!=0)//bsl=Ask-(StopLoss*pips);
         //if((Ask-(StopLoss*pips))>(Ask-MODE_SPREAD*pips))bsl=Ask-MODE_SPREAD*pips;
         //else bsl=Ask-(StopLoss*pips);
      //if(UsePercentStop)bsl=Ask-(RiskedAmount/(LotSize*10))*pips;
      //if(TakeProfit!=0) 
      //btp=Ask+(TakeProfit*pips);
      //if(UsePercentProfit)btp=Ask+(RewardAmount/(LotSize*10))*pips;
      //new
      //bsl=buy_stop_price;
      //btp=buy_takeprofit_price;
      //LotSize=(RiskedAmount/(pips_to_bsl/pips))/10;
      if(OpenOrdersThisPair(Symbol())==0)
        {
         //LotSize=AutoLotSize(AccountEquity());
// For ECN Brokers: 
         buyticket = OrderSend(Symbol(),OP_BUY,LotSize,Ask,3,0,0,NULL,Magic,0,clrGreen);
         if(buyticket > 0)
           {
            OrderModify(buyticket,OrderOpenPrice(),Ask-(StopLoss*pips),Ask+(TakeProfit*pips),0,clrNONE);
           }
        }
      

   if(direction==1)
      //ssl = Bid + (StopLoss*pips);
      //if(StopLoss !=0)Bid+(StopLoss*pips);
         //if(MODE_SPREAD <= StopLoss)ssl=Bid+(StopLoss*pips);
         //else ssl=Bid+MODE_SPREAD*pips;
      //if(UsePercentStop)ssl=Bid+(RiskedAmount/(LotSize*10))*pips;
      //if(TakeProfit!=0)stp=Bid-(TakeProfit*pips);
      //if(UsePercentProfit)stp=Bid-(RewardAmount/(LotSize*10))*pips;
      //new
      //ssl=sell_stop_price;
      //stp=sell_takeprofit_price;
      //LotSize=(RiskedAmount/(pips_to_ssl/pips))/10;
      if(OpenOrdersThisPair(Symbol())==0)
        { 
         //LotSize=AutoLotSize(AccountEquity());
// For ECN Brokers: 

         sellticket = OrderSend(Symbol(),OP_SELL,LotSize,Bid,3,0,0,NULL,Magic,0,clrRed);
         if(sellticket > 0)
           {
            OrderModify(sellticket,OrderOpenPrice(),Bid+(StopLoss*pips),Bid-(TakeProfit*pips),0,clrNONE);
           }
        }
  }//                                            IF BELOW BID, TRADE WILL NOT HAVE A S/L
  
  
void CheckForStochasticTrade()
  {  
   //MODE_MAIN = value, MODE_SIGNAL=signal
   double Macd_Value=iMACD(NULL,0,fast_ema_period,slow_ema_period,signal_period,applied_price,MODE_MAIN,1);
   double Macd_Value_60=iMACD(NULL,60,fast_ema_period,slow_ema_period,signal_period,applied_price,MODE_MAIN,1);
   double threshold=Macd_Threshold*pips;
   // (Symbol(),timeframe,%k line,%d line,slowing(avg of how many candles),mode(SMA,EMA(expon),SMMA(smoothed),LWMA(linear-weighted)),price field(high/low, close/close),indicator line (main=k line, signal=d line),shift)
   double k_line = iStochastic(NULL,0,PercentK,PercentD,SlowingSt,Stoch_MA_Method,0,MODE_MAIN,1);
   double d_line = iStochastic(NULL,0,PercentK,PercentD,SlowingSt,Stoch_MA_Method,0,MODE_SIGNAL,1);
   double prev_k_line = iStochastic(NULL,0,PercentK,PercentD,SlowingSt,Stoch_MA_Method,0,MODE_MAIN,2);
   double prev_d_line = iStochastic(NULL,0,PercentK,PercentD,SlowingSt,Stoch_MA_Method,0,MODE_SIGNAL,2);
   
   if(Macd_Value>-threshold)
      if(prev_k_line > 80 && prev_d_line > 80)
         if(prev_k_line > prev_d_line && k_line < d_line)
            OrderEntry(1);
   if(Macd_Value<threshold)         
      if(prev_k_line < 20 && prev_d_line < 20)
         if(prev_k_line < prev_d_line && k_line > d_line)
            OrderEntry(0);
  
  }  
  
  
  
void CheckForMaTrade()
  {
   double CurrentFast = iMA(NULL,0,FastMA,FastMaShift,FastMaMethod,FastMaAppliedTo,1);
   double CurrentSlow = iMA(NULL,0,SlowMA,SlowMaShift,SlowMaMethod,SlowMaAppliedTo,1);
   double PreviousFast = iMA(NULL,0,FastMA,FastMaShift,FastMaMethod,FastMaAppliedTo,2);
   double PreviousSlow = iMA(NULL,0,SlowMA,SlowMaShift,SlowMaMethod,SlowMaAppliedTo,2);

   if(PreviousFast<PreviousSlow && CurrentFast>CurrentSlow)OrderEntry(0);
   if(PreviousFast>PreviousSlow && CurrentFast<CurrentSlow)OrderEntry(1);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
int OpenOrdersThisPair(string pair)
   {
   int total=0;

   for(int i=OrdersTotal()-1; i>=0;i--)
     {
      OrderSelect(i,SELECT_BY_POS,MODE_TRADES);
      if(OrderSymbol()==pair) total++;
     }
   
   return(total);
   }


double AutoLotSize(double accountfigure)
  {
   double Lotplaceholder;
   if(accountfigure < 140)Lotplaceholder=0.2;
   if(accountfigure >= 140 && accountfigure < 200)Lotplaceholder=0.3;
   if(accountfigure >= 200 && accountfigure < 310)Lotplaceholder=0.4;
   if(accountfigure >= 310 && accountfigure < 360)Lotplaceholder=0.5;
   if(accountfigure >= 360 && accountfigure < 540)Lotplaceholder=0.6;
   if(accountfigure >= 540 && accountfigure < 610)Lotplaceholder=0.7;
   if(accountfigure >= 610 && accountfigure < 690)Lotplaceholder=0.8;
   if(accountfigure >= 690 && accountfigure < 780)Lotplaceholder=0.9;
   if(accountfigure >= 780 && accountfigure < 880)Lotplaceholder=1.0;
   if(accountfigure >= 880 && accountfigure < 990)Lotplaceholder=1.1;
   if(accountfigure >= 990 && accountfigure < 1110)Lotplaceholder=1.2;
   if(accountfigure >= 1110 && accountfigure < 1250)Lotplaceholder=1.4;
   if(accountfigure >= 1250 && accountfigure < 1400)Lotplaceholder=1.5;
   if(accountfigure >= 1400 && accountfigure < 1570)Lotplaceholder=1.7;
   if(accountfigure >= 1570 && accountfigure < 1760)Lotplaceholder=1.9;
   if(accountfigure >= 1760 && accountfigure < 1980)Lotplaceholder=2.2;
   if(accountfigure >= 1980 && accountfigure < 2220)Lotplaceholder=2.4;
   if(accountfigure >= 2220 && accountfigure < 2480)Lotplaceholder=3.0;
   if(accountfigure >= 2480 && accountfigure < 3130)Lotplaceholder=3.4;
   if(accountfigure >= 3130 && accountfigure < 3510)Lotplaceholder=3.8;
   if(accountfigure >= 3510 && accountfigure < 3940)Lotplaceholder=4.2;
   if(accountfigure >= 3940 && accountfigure < 4420)Lotplaceholder=4.8;
   if(accountfigure >= 4420 && accountfigure < 4950)Lotplaceholder=5.3;
   if(accountfigure >= 4950 && accountfigure < 5550)Lotplaceholder=6.0;
   if(accountfigure >= 5550 && accountfigure < 6220)Lotplaceholder=6.7;
   if(accountfigure >= 6220 && accountfigure < 6970)Lotplaceholder=7.5;
   if(accountfigure >= 6970 && accountfigure < 7810)Lotplaceholder=8.4;
   if(accountfigure >= 7810 && accountfigure < 8750)Lotplaceholder=9.4;
   if(accountfigure >= 8750 && accountfigure < 9810)Lotplaceholder=10.6;
   if(accountfigure >= 9810 && accountfigure < 10990)Lotplaceholder=11.8;
   if(accountfigure >= 10990 && accountfigure < 12310)Lotplaceholder=13.2;
   if(accountfigure >= 12310 && accountfigure < 13790)Lotplaceholder=14.8;
   if(accountfigure >= 13790 && accountfigure < 15450)Lotplaceholder=16.6;
   if(accountfigure >= 15450 && accountfigure < 17310)Lotplaceholder=18.6;
   if(accountfigure >= 17310 && accountfigure < 19390)Lotplaceholder=20.8;
   if(accountfigure >= 19390 && accountfigure < 21720)Lotplaceholder=23.3;
   if(accountfigure >= 21720 && accountfigure < 24330)Lotplaceholder=26.1;
   if(accountfigure >= 24330 && accountfigure < 27260)Lotplaceholder=29.3;
   if(accountfigure >= 27260 && accountfigure < 30540)Lotplaceholder=32.8;
   if(accountfigure >= 30540 && accountfigure < 34210)Lotplaceholder=36.7;
   if(accountfigure >= 34210 && accountfigure < 38320)Lotplaceholder=41.1;
   if(accountfigure >= 38320 && accountfigure < 42930)Lotplaceholder=46.1;
   if(accountfigure >= 42930 && accountfigure < 48090)Lotplaceholder=51.6;
   if(accountfigure >= 48090 && accountfigure < 53870)Lotplaceholder=57.8;
   if(accountfigure >= 53870 && accountfigure < 60340)Lotplaceholder=64.7;
   if(accountfigure >= 60340 && accountfigure < 67590)Lotplaceholder=72.5;
   if(accountfigure >= 67590 && accountfigure < 75710)Lotplaceholder=81.2;
   if(accountfigure >= 75710 && accountfigure < 84810)Lotplaceholder=91.0;
   if(accountfigure >= 84810 && accountfigure < 95000)Lotplaceholder=101.9;
   if(accountfigure >= 95000 && accountfigure < 106410)Lotplaceholder=114.1;
   if(accountfigure >= 106410 && accountfigure < 119190)Lotplaceholder=127.8;
   if(accountfigure >= 119190 && accountfigure < 133500)Lotplaceholder=143.1;
   if(accountfigure >= 133500)Lotplaceholder=160.3;
   
   
   return(Lotplaceholder);
   
  }




void exitBuys()
  {
   int err;
   for(int i=OrdersTotal()-1;i>=0;i--)
     {
      if(OrderSelect(i,SELECT_BY_POS,MODE_TRADES))
        {
         if(OrderType()==OP_BUY && OrderMagicNumber()==Magic)
           {
            while(true)
              {
               bool result=OrderClose(OrderTicket(),OrderLots(),Bid,3,clrYellow);
               if(result != true)
                 {
                  err = GetLastError();Print("LastError = ",err);
                 }
               else err = 0;
               switch(err)
                 {
                  case 135://ERR_PRICE_CHANGED
                  case 136://ERR_OFF_QUOTES
                  case 137://ERR_BROKER_BUSY
                  case 138://ERR_REQUOTE
                  case 146:Sleep(1000);RefreshRates();i++;break;//ERR_TRADE_CONTEXT_BUSY
                  default:break;
                 }
              }
           }
        }
      else Print("When selecting a trade, error ",GetLastError(), " occurred");
     }
  
  }


void exitSells()
  {
   int err;
   for(int i=OrdersTotal()-1;i>=0;i--)
     {
      if(OrderSelect(i,SELECT_BY_POS,MODE_TRADES))
        {
         if(OrderType()==OP_SELL && OrderMagicNumber()==Magic)
           {
            while(true)
              {
               bool result=OrderClose(OrderTicket(),OrderLots(),Ask,3,clrBlue);
               if(result != true)
                 {
                  err = GetLastError();Print("LastError = ",err);
                 }
               else err = 0;
               switch(err)
                 {
                  case 135://ERR_PRICE_CHANGED
                  case 136://ERR_OFF_QUOTES
                  case 137://ERR_BROKER_BUSY
                  case 138://ERR_REQUOTE
                  case 146:Sleep(1000);RefreshRates();i++;break;//ERR_TRADE_CONTEXT_BUSY
                  default:break;
                 }
              }
           }
        }
      else Print("When selecting a trade, error ",GetLastError(), " occurred");
     }
  
  }




/*void button1(int message)
{
   if(message == 3)MessageBox("You pushed abort");
   else if(message == 4)MessageBox("Retry");
   else if(message == 5)MessageBox("Ignore");     
}

void testswitch(int number)
{
   switch(number)
   {
      case 3: MessageBox("Abort");break;
      case 4: MessageBox("Retry");break;
      case 5: MessageBox("Ignore");break;
      default:MessageBox("Nuttn matched");break;
   }
}


            either use Ask - stoploss or Ask - spread
            
            if((Ask-(StopLoss*pips))>=(Ask-(MODE_SPREAD*pips)))bsl=(Ask-(MODE_SPREAD*pips));
            if((Ask-(StopLoss*pips))<(Ask-(MODE_SPREAD*pips)))bsl=(Ask-(StopLoss*pips));
            Print(Ask-StopLoss*pips);
            Print(Ask-MODE_SPREAD*pips);



*/
//+------------------------------------------------------------------+
